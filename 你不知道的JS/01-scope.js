/**
 * 1. 概念: RHS 理解为 retrieve his source value (取到它的源值)
 * 2.      赋值操作的目标是谁(LHS) 以及  谁是赋值操作的源头(RHS)
 */

/**
 * 理解一下例子:
 */


function foo(a) {//为了给参数a (隐式地)分配值,需要进行一次LHS查询.
    console.log(a);//这里还有对a进行的RHS引用,并且将得到的值传给了console.log(...).
    //console.log(...)本身也需要一个引用才能执行,因此会对console对象进行RHS查询,
    //并且检查得到的值中是否有一个叫做log的方法.
}

foo(2);//函数的调用需要对foo进行RHS引用,意味着 "去找到foo的值,并把它给我"
//并且(...)意味着foo的值需要被执行,因此他最好真的是一个函数类型的值!



/**
 * 自测例子:引擎和作用域的对话, LHS查询 3处,  RHS查询 4处
 */
function foo_01(a) {//参数赋值 LHS +2
    var b = a; //查找a //RHS +2  , 赋值b LHS +3
    return a + b; // 查找a //RHS +3, 查找b RHS +4
}
var c = foo_01(2); // 查找foo_01 RHS +1  赋值c LHS +1

/**
 * 3. 作用域链的概念:
 * 3.1 向上查找,当前作用域 --> 全局作用域
 * 3.2 如果RHS 查询在所有嵌套的作用域中遍寻不到所需的变量,引擎就会抛出 ReferenceError
 *     异常.
 * 3.3 当引擎执行LHS查询时,如果在顶层(全局作用域)中也无法找到目标变量,全局作用域
 *     中就会创建一个具有该名称的变量,并将返还给引擎,前提是程序运行在非""严格模式"下.
 */

