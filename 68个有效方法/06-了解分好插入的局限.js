//JavaScript的一个便利是能够离开语句结束分好工作. 删除分号后,结果变得轻量而优雅:
function Point(x,y) {
    this.x = x || 0
    this.y = y || 0
}
Point.prototype.isOrigin = function() {
    return this.x === 0 && this.y === 0
}

//1.分号插入的第一条规则:
//分号仅在 | 标记之前,一个或多个换行之后和程序输入的结尾被插入.

//2.分号插入的第二条规则:
//分号仅在随后的输入标记不能解析时插入.

//换句话说,分号插入是一种错误校正机制.

// a = b
// (f());
// -------> 能正确地解析为一条单独的语句,等价于: a = b(f());
// 也就是说,没有分号插入,与此相反,下面这段代码:
// a = b
//f();
// -------> 被解析为两条独立的语句:  a = b f();


/**
 * 1. 仅在 "|" 标记之前,一行的结束和程序的结束处推导分号.
 * 2. 仅在紧接着的标记不能被解析的时候推导分号.
 * 3. 在以(, [, +, - 或 / 字符开头的语句前绝不能省略分号.
 * 4. 当脚本连接的时候, 在脚本之间显式地插入分号.
 * 5. 在 return, throw, break, continue, ++ 或 -- 的参数之前绝不能换行.
 * 6. 分号不能作为for 循环的头部或空语句的分隔符而被推导出.
 */