/**
 * __proto__属性很特殊,它提供了 Object.getPrototypeOf()方法所不具备的额外的能力,即
 * 修改对象原型链接的能力. 虽然这种能力看起来是无害的,但实际上会造成严重的影响,应当避免使用.
 * 避免修改__proto__属性的最明显的原因是可移值性问题,因为并不是所有的平台都支持改变对象
 * 原型的特性,所以根本无法编写可移值的代码.
 * 
 * 避免修改__proto__属性的另一个原因是性能问题,所有现代的JavaScript引擎都深度优化了获取
 * 和设置对象属性的行为,因为这些都是一些最常见的JavaScript程序的操作.这些优化都是基于引擎
 * 对对象结构的认识上. 当更改了对象的内部结构,将会使一些优化失效. 修改 __proto__属性实际上
 * 改变了继承结构本身,则可能是最具破坏性的修改,比起普通的属性修改,修改__proto__属性会导致
 * 更多的优化失败.
 * 
 * 但避免修改__proto__属性最大的原因是为了保持行为的可预测性,对象的原型链通过其一套确定
 * 的属性及属性值来定义它的行为,修改对象的原型链就像对其进行 "大脑移值"(brain transplant),
 * 这会交换对象的整个继承层次结构,在某些特殊情况下这样的操作可能是有用的,但是保持继承层次结构
 * 的相对稳定是一个基本的准则.
 * 
 * 可以使用ES5中的Object.create函数来创建一个具有自定义原型链的新对象. 对于不支持ES5的运行环境,
 * 一种不依赖于 __proto__属性的可移值的 Object.create 函数实现.
 */

/**
 * 1.始终不要修改对象的 __proto__ 属性.
 * 2.使用Object.create 函数给新对象设置自定义的原型.
 */