/**
 * JS引擎建立在单线程事件循环的概念上,单线程( Single-threaded)意味着同一时刻只能
 * 执行一段代码
 * JS引擎在同一时刻只能执行一段代码,所以引擎无须留意那些 "可能" 运行的代码. 代码会被放置在
 * 作业队列(job queue)中,每当一段代码准备被执行,它就会被添加到作业队列. 当JS引擎结束当前
 * 代码的执行后,时间循环就会执行队列中的下一个作业.
 * 事件循环( event loop ) 是JS引擎的一个内部处理线程,能监视代码的执行并管理作业队列.
 */

/**
 * 1.事件模型
 * 当用户点击按钮或按下键盘上的一个键时,一个事件(event) --- 例如 onclick ----就别触发了.该
 * 事件可能会对此交互进行响应,从而将一个新的作业添加到作业队列的尾部.这就是JS关于异步编程的最基本
 * 形式. 事件处理程序代码直到事件发生后才会被执行,此时它会拥有合适的上下文.如下:
 */
let button = document.getElementById("my-btn");
button.onclick = function(event){
    console.log("Clicked");
}
//在此代码中, console.log("Clicked") 直到 button 被点击后才会被执行. 当 button 被点击, 赋值给
//onclick 的函数就被添加到作业队列的尾部,并在队列前部所有任务结束之后再执行.

/**
 * 2.回调模式
 * 
 */