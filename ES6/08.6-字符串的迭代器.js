/**
 * 从ES5发布开始,JS的字符串就慢慢变得越来越像数组. 例如ES5标准化了字符串的方扩好表示法,用于
 * 访问其中的字符(即: 使用 text[0] 来获取第一个字符,以此类推). 不过方括号表示法工作在码元而
 * 非字符上,因此它不能被用于正确访问双字节的字符,正如此例所演示的:
 */
var message = "A B";
for(let i = 0; i < message.length; i++){
    console.log(message[i]);
}
/**
 * 由于双字节字符被当做两个分离的码元来对待,此处的输出在 A 与 B 之间就有了四个空行.
 * 幸好,ES6 旨在为 Unicode提供完全支持(详见第二章),字符串的默认迭代器就是解决字符串迭代问题的一种尝试.
 * 这样一来,借助字符串默认迭代器就能处理字符而不是码元.将上个范例修改为使用字符串默认迭代器配合 for-of
 * 循环,会得到更加合适的输出.如下:
 */
for(let c of message){
    console.log(c);
}
//作用对象是字符,让本次的结果更符合预期;循环成功地打印出了这个Unicode字符以及其余字符.

