/**
 * 1. 将HTML字符串转换成DOM
 * HTML字符串转DOM结构不是特别. 事实上,它主要用到了一个大家都很熟悉的工具:
 * innerHTML属性.
 * 
 * 转换的步骤如下: 
 * 1. 确保HTML字符串是合法有效的
 * 2. 将它包裹在任意复合浏览器规则要求的闭合标签内.
 * 3. 使用innerHTML将这串HTML插入到虚拟DOM元素中.
 * 4. 提取该DOM节点.
 * 
 * 预处理HTML源字符串
 * 首先,需要清理HTML源来满足我们的需求. 举例来说, 如下代码是一个骨架HTML,它允许我们选择
 * 一个"忍者"(通过 option 元素), 并在表格中展示所选 "忍者" 的详细信息, 假定在选择之后
 * 加入详细信息: 
 * <option>Yoshi</option>
 * <option>Kuma</option>
 * <table />
 * 
 * 这段hTML代码有两个问题. 一, option元素不能孤立存在. 如果遵循良好的 HTML 语义, 它们应该
 * 被包含在 select 元素内. 二, 虽然标记语言通常允许自闭和无子元素的标签,类似<br />,但HTML里
 * 只有一小部分元素支持(table并不在其中). 这之外的元素使用类似写法时,在某些浏览器下会导致异常.
 * 
 * 让我们先解决下自闭合元素的问题. 为支持该特性,我们可以对HTML字符串进行快速预处理,将诸如<table />
 * 的元素转换为<table></table> 
 * 
 * 如清单12.1 所示.
 * 
 * 执行完上面的转换后, 我们还需要解决选项元素没有包含在 select 元素中的问题. 让我们看看如何确定
 * 一个元素是否需要包装.
 * 
 * - 包装HTML
 * 根据HTML的语义, 一些HTML元素必须包装在某些容器元素中,才能被注入.
 * 例如, <option>元素必须包含在<select>中.
 * 
 * 我们可以通过两种方式解决这个问题, 这两种方式都需要构建问题元素和它们的容器之间的映射.
 * - 通过innerHTML将该字符串直接注入到它的待定父元素中, 该父元素提前使用内置的document.createElement创建好.
 * 尽管大多数情况下的大部分的浏览器都支持这种方式,但仍然不能保证完全通用.
 * - HTML字符串可以在使用对应父元素包装后,直接注入到任意容易元素中< 比如 <div> ).
 * 
 */