/**
 * 内容: 
 * 使用 getter 和 setter 控制访问对象的属性
 * 通过代理控制对象的访问
 * 使用代理解决交叉访问的问题
 * 
 * 在前面的章节中, 已经了解了 JavaScript 对象是动态属性的集合, 可以很容易地添加属性, 修改属性值, 甚至移除已有属性.
 * 在许多情况下(例如, 验证属性值, 日志记录, 在UI中展示数据), 我们需要严格监控当前对象的状态.因此,在本章,你讲了解
 * 控制对象的访问以及监控对象的技术.
 * 
 * - getter 和 setter 开始, 这两个方法是用于控制, 访问指定对象的属性.
 * - 代理, 代理是ES6中引入的全新的对象类型. 通过代理对象可以控制对其他对象的访问. 其工作原理, 使用代理对象方便,有效
 * 地扩展代码, 处理独享属性的交叉访问的问题, 例如: 
 * 性能评估, 日志记录, 以及如何使用自动设置对象属性避免 null 异常.
 * 
 * 问题: 
 * 通过 getter 和 setter 访问属性值有什么好处?
 * 代理与getter和setter的主要区别是什么?
 * 代理对象 的常见问题是什么? 列举3项代理对象的常见问题?
 */