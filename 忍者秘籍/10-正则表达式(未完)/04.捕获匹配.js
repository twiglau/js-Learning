/**
 * 4.1 执行简单捕获
 * 假设我们需要提取嵌在复杂字符串中的数值. 一个很好的例子是 CSS 的transform属性,
 * 通过transform可以修改HTML元素的视觉位置
 * 
 * 如清单10.4所示 - 一个捕获内嵌值的简单函数
 * 
 * 解释:
 * match方法匹配结果通过第一个索引返回,然后每次捕获结果索引递增. 所以第0个匹配的是整个
 * 字符串 translateY(15px), 第2个位置是 15px.
 * 
 * 在正则表达式中使用圆括号定义捕获. 因为我们在正则表达式中仅定义了一个捕获, 即在translate Y
 * 之后的圆括号中定义了一个捕获, 因此,当匹配变换值时, 其值存储在 [1] 中.
 * 
 * 该示例使用局部正则表达式 和 match 方法. 当使用全局表达式是,情况稍微有所不同.
 */

/**
 * 4.2 使用全局表达式进行匹配
 * 在前一节中,我们看到了使用String对象的match方法,使用局部正则表达式可以返回数组,该数组中包含
 * 全部匹配的内容以及操作中的全部捕获结果.
 * 
 * 但是当使用全局正则表达式(添加g标识符), 却返回不同的结果. 虽然返回的仍然是数组, 但是全局正则
 * 表达式不仅返回第一个匹配的结果,还返回全部的匹配结果, 但不会返回捕获结果
 * 
 * 清单10.5 - 全局匹配与局部匹配查找时的区别
 * 
 * 如果捕获结果对我们来说很重要,那么可以在全局匹配中使用正则表达式的 exec 方法. 可多次对一个正则
 * 表达式调用 exec 方法, 每次调用都可以返回下一个匹配的结果. 
 * 
 * 清单10.6 - 使用exec方法进行捕获与全局搜索
 */