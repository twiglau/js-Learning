/**
 * 本节中, 我们首先看看创建数组的不同方法. 然后研究如何向数组的不同
 * 位置添加元素,删除元素. 最后,查看数组的内置方法,以便更优雅地编写处理数组的代码.
 */

/**
 * 1. 创建数组
 * 两种基本方式: 
 * - 使用内置的Array构造函数
 * - 使用数组字面量 []
 * 
 * 我们从创建简单的数组 ninjas 和 数组 samurai 开始
 * 如清单 9.1 所示.
 * 
 * assert(ninjas[4] === undefined,"We get undefined if we try to access an out of bounds index");
 * 这个结果表明, JavaScript的数组是对象. 假如访问不存在的对象, 会返回 undefined. 访问不存在的数组索引,也会返回
 * undefined.
 */

/**
 * 2. 在数组两段添加,删除元素
 * - push: 在数组末尾添加元素
 * - unshift: 在数组开头添加元素
 * - pop: 从数组末尾删除元素
 * - shift: 从数组开头删除元素
 */

/**
 * 3. 在数组任意位置添加,删除元素
 * 
 * 清单9.3 -删除数组元素的粗略方法
 * delete ninjas[1]
 * 这种删除数组元素的方法无效, 只是在数组中创建了一个空元素. 数组仍然有4个元素,
 * 其中我们想要删除的元素是 undefined
 * 
 * 如果想要在数组任意位置插入元素,从哪里开始呢?
 * JavaScript中所有的数组都有 splice 方法: 从给出的索引开始, splice 可以完成删除,
 * 插入元素.
 * 
 * 看看清单9.4 -在数组惹你位置删除,添加元素
 */