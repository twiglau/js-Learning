/**
 * 典型客户端Web应用的生命周期从 用户在浏览器地址栏输入一串URL, 或单击一个链接开始.
 * 例如, 我们想去Google的主页查找一个术语. 首先我们输入了URL, www.google.com,
 * 其过程如下: 
 * 
 * 用户动作              浏览器动作                服务器动作
 * 
 * 1) 输入URL          2)生成请求并               3)执行某些动作或者
 * (或者单击链接)        发送至服务器               获取某些资源;将响应发送回客户端
 * 
 * 
 *                    4)处理HTML,CSS和JavaScript
 *                    并构建结果页面
 * 
 * 
 *                    5)监控事件队列,一次
 *                    处理其中的一个事件
 *                         |
 * 6) 与页面                |
 * 元素交互                 | 事件处理
 *    |                    |
 *    |                    |
 *    V                    |
 * 7)关闭Web页面 ------>    | 应用声明周期结束
 * 
 * 从用户的角度来说, 浏览器构建了发送至服务器(序号2)的请求,该服务器处理了请求(序号3)并形成了一个通常由HTML,
 * CSS和JavaScript代码所组成的响应. 当浏览器接收了响应(序号4)时, 我们的客户端应用开始了它的生命周期.
 * 由于客户端Web应用是图形用户界面 (GUI) 应用, 其生命周期与其他的GUI应用相似,其执行步骤如下
 * 
 * 1.页面构建 --- 创建用户界面;
 * 2.事件处理 --- 进入循环(序号5)从而等待事件(序号6)的发生,发生后调用事件处理器.
 * 
 * 应用的声明周期随着用户关掉或离开页面(序号7)而结束. 现在让我们一起看一个简单的示例程序: 每当用户移动鼠标或
 * 单击页面就会显示一条消息. 本章会始终使用这个示例.
 * index.html
 */

/**
 * 2. 页面构建阶段
 * 目标是建立Web应用的UI,主要有两个步骤: 
 * > 解析HTML代码并构建文档对象模型(DOM);
 * > 执行JavaScript代码.
 * 
 * 步骤1 会在浏览器处理HTML节点的过程中执行, 步骤二会在HTML解析到一种特殊节点--脚本节点(包含或引用JavaScript代码的节点)时执行.
 * 页面构建阶段中,这两个步骤会交替执行多次,如下: 
 * 
 * 02.1 图
 * 
 * 
 * 2.1 HTML解析和DOM构建
 * 当浏览器遇到第一个脚本元素时, 它已经用多个HTML元素(右边的节点)创建了一个DOM树
 * 
 * 为了正确构建每个DOM, 浏览器还会修复它在蓝图中发现的问题.
 */

/**
 * 2.2 执行JavaScript代码
 * 所有包含在脚本元素中的JavaScript代码由浏览器的 JavaScript引擎执行
 * 
 * > JavaScript中的全局对象
 * 浏览器暴露给JavaScript引擎的主要全局对象是window对象, 它代表了包含着一个页面的窗口. window对象是获取所有其他
 * 全局对象, 全局变量(甚至包含用户定义对象) 和 浏览器API的访问途径. 全局window对象最重要的属性是document,它代表
 * 了当前页面的 DOM. 通过使用这个对象, JavaScript代码就能在任何程度上改变DOM,包括修改 或 移除 现存的节点,以及
 * 创建和插入新的节点.
 * 
 * 一般来说, JavaScript 代码能够在任何程度上修改DOM结构: 它能创建新的节点或移除现有DOM节点. 但它依然不能做某些事情,
 * 例如选择和修改还没被创建的节点. 这就是为什么要把script元素放在页面底部的原因.如此一来, 我们就不必担心是否某个HTML
 * 元素已经加载为 DOM.
 * 
 * 一旦JavaScript 引擎执行到了脚本元素中JavaScript 代码的最后一行, 浏览器就退出了 JavaScript 执行模式,并继续余下的
 * HTML构建为DOM节点. 在这期间, 如果浏览器再次遇到脚本元素, 那么从HTML到DOM的构建再次暂停, JavaScript运行环境开始
 * 执行余下的JavaScript代码.
 * 
 * 需要重点注意: 
 * > JavaScript应用在此时依然会保持着全局状态. 所有在某个JavaScript代码执行期间用户创建的全局变量都能正常地被其他脚本
 * 元素中的JavaScript代码所访问到. 其原因在于全局 window 对象会存在于整个页面的生存期之间,在它上面存储所有的JavaScript
 * 变量. 只要还有没处理完的 HTML 元素 和 没执行完的 JavaScript 代码, 下面两个步骤都会一直交替执行.
 * > 将HTML构建为 DOM.
 * > 执行JavaScript代码.
 * 
 * 最后, 当浏览器处理完所有 HTML 元素后, 页面的构建阶段结束,随后浏览器就会进入应用声明周期的第二部分, 事件处理.
 */