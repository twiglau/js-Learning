/**
 * 使用闭包简化代码
 * 使用执行上下文跟踪 JavaScript 程序的执行
 * 使用词法环境(Lexical Environment) 跟踪变量的作用域
 * 理解变量的类型
 * 探讨闭包的工作原理
 * 
 * 闭包是JavaScript的显著特征. 虽然许多JavaScript开发者在开发时没有理解闭包的
 * 主要优势, 但是使用闭包,不仅可以通过减少代码数量和复杂度来添加高级特性,还能实现
 * 不太可能完成的闭包, 事件处理和动画等包含回调函数的任务,它们的实现将变得复杂得多.
 * 除此之外,如果没有闭包,将完全不可能实现私有变量. JavaScript语言的蓝图, 以及我们
 * 编码的方式,都是由闭包塑造出来的.
 * 
 * 闭包带来的问题是 JavaScript 的作用域是如何工作的. 为此,将探讨JavaScript的作用域
 * 规则,需要特别注意新增的特性,这将有助于理解在特定场景下闭包的工作原理.
 * 
 * 一个变量或方法有几种不同的作用域? 这些作用域分别是什么?
 * 如何定位标识符及其值?
 * 什么是可变变量? 如何在JavaScript中定义可变变量?
 */