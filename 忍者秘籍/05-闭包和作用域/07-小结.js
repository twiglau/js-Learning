/**
 * 1. 通过闭包可以访问创建闭包时所处环境中的全部变量. 闭包为函数创建时所处的作用域中的函数和变量, 创建 "安全气泡".
 * 通过这种的方式, 即使创建函数时所处的作用域已经消失, 但是函数仍然能够获得执行时所需的全部内容.
 * 
 * 2. 我们可以使用闭包的这些高级功能: 
 * > 通过构造函数内的变量以及构造方法来模拟对象的私有属性.
 * > 处理回调函数, 简化代码.
 * 
 * 3. JavaScript引擎通过执行上下文栈(调用栈)跟踪函数的执行. 每次调用函数时,都会创建新的函数执行上下文,并推入调用栈顶端.
 * 当函数执行完成后,对应的执行上下文将从调用栈中推出.
 * 
 * 4. JavaScript引擎通过词法环境跟踪标识符(俗称作用域).
 * 
 * 5. 可以使用关键字 var, let 与 const 定义变量: 
 * > 关键字var定义距离最近的函数级变量或全局变量
 * > 关键字let与const定义距离最近级别的变量, 包括块级变量. 块级变量在ES6之前版本的JavaScript中是无法实现的.
 * 此外,通过关键字const允许定义只能赋值一次的变量.
 * 
 * 6. 闭包是JavaScript作用域规则的副作用. 当函数创建时所在的作用域消失后, 仍然能够调用函数.
 */