/**
 * 探讨原型
 * 使用函数作为构造器
 * 使用原型扩展对象
 * 避免常见的问题
 * 使用继承创建类
 * 
 * 可以在原型对象上增加特定属性. 原型是定义属性和功能的一种便捷方式,对象可以访问原型上
 * 的属性和功能. 原型类似于经典的面向对象语言中的类(class). 实际上, JavaScript中原型
 * 的主要用于是使用一种类风格的面向对象和继承的方式进行编码.
 * 
 * 问题
 * 如何知道一个对象是否可以访问特定的属性?
 * 在JavaScript中使用对象时,为什么原型链至关重要?
 * ES6中的关键字class是否改变了JavaScript中对象的工作机制?
 */