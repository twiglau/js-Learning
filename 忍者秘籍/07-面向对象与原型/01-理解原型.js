//在JavaScript中,对象是属性名与属性值的集合.例如我们可以简单地创建
//一个对象字面量: 
let obj = {
    prop1: 1, //简单值赋值
    prop2: function(){},//函数赋值
    prop3:{} //对象赋值
}
/**
 * 对象属性可以是简单值 (如数值,字符串), 函数 或 其他对象. 同时, JavaScript是动态语言,
 * 可以修改或删除对象的属性: 
 */
obj.prop1 = 1; //prop1保存了一个简单的数字
obj.prop1 = []; //为对象属性赋值完全不同类型的值,这里是数组赋值
delete obj.prop2; //从对象删除属性

//也可以为对象添加新属性: 
obj.prop4 = "Hello"; //添加一个全新的属性
/**
 * 最后, 在以上修改完成之后, 最终的对象如下: 
 * {
 *    prop1:[],
 *    prop3:{},
 *    prop4:"Hello"
 * }
 * 
 * 在软件开发的过程中, 为了避免重复造轮子, 我们希望可以尽可能地复用代码. 继承是代码复用的一种方式,继承有助于
 * 合理地组织程序代码, 将一个对象的属性扩展到另一个对象上. 在JavaScript中,可通过原型实现继承.
 * 
 * 原型的概念很简单. 每个对象都含有原型的引用, 当查找属性时, 若对象本身不具有该属性,则会查找原型上是否 有该属性.
 * 可以假想以下, 你正和一组共同玩一个游戏,游戏规则为: 主持人提问,如果你知道答案,则可直接回答;如果你不知道答案,则
 * 可以询问你的下一个人. 就是那么简单. 
 * 
 * 查看清单7.1 对象可以通过原型访问其他对象的属性
 * 
 * 为了测试对象是否具有某一个特定的属性,我们可以使用操作符 in. 例如,执行 skulk in yoshi,返回true, 因为对象 yoshi
 * 可以访问属性 skulk.
 * 
 * 在JavaScript中, 对象的原型属性是内置属性 (使用标记 [[prototype]]),无法直接访问. 相反, 内置的方法 Object.setPrototypeOf
 * 需要传入两个对象作为参数, 并将第二个对象设置为第一个对象的原型. 例如, 执行语句 Object.setPrototypeOf(yoshi,hattori);
 * 将yoshi的原型设置为 hattori.
 * 
 * 需要特别强调的是, 每个对象都可以有一个原型, 每个对象的原型也可以拥有一个原型, 以此类推,形成一个原型链. 查找特定属性将会被委托
 * 在整个原型链上, 只有当没有更多的原型可以进行查找时, 才会停止查找. 
 */